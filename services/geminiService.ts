import { GoogleGenAI, Modality, Part } from "@google/genai";

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  console.error("API_KEY environment variable not set.");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

const fileToGenerativePart = (base64Data: string, mimeType: string): Part => {
  return {
    inlineData: {
      data: base64Data.split(',')[1], // remove the "data:mime/type;base64," prefix
      mimeType,
    },
  };
};

export const generateFusedImage = async (
  imageA: { base64: string; mimeType: string },
  imageB: { base64: string; mimeType: string },
  prompt: string
): Promise<string> => {
  if (!API_KEY) {
    throw new Error("API key is not configured.");
  }

  try {
    const imagePartA = fileToGenerativePart(imageA.base64, imageA.mimeType);
    const imagePartB = fileToGenerativePart(imageB.base64, imageB.mimeType);
    const textPart = { text: prompt };

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [imagePartA, imagePartB, textPart],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates?.[0]?.content?.parts || []) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        const mimeType = part.inlineData.mimeType;
        return `data:${mimeType};base64,${base64ImageBytes}`;
      }
    }

    throw new Error("No image was generated by the API.");
  } catch (error) {
    console.error("Error generating image with Gemini API:", error);
    if (error instanceof Error) {
        throw new Error(`API Error: ${error.message}`);
    }
    throw new Error("An unknown error occurred during image generation.");
  }
};
